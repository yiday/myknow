[{"title":"Hello World","url":"/2025/05/14/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick Start\n\n"},{"title":"禅的世界-圣严法师","url":"/2025/05/12/books/%E4%BD%9B%E5%AD%A6/%E7%A6%85%E7%9A%84%E4%B8%96%E7%95%8C/","content":"禅的世界-圣严法师\n释圣严，或尊称为圣严“法师”（1931年1月22日－2009年2月3日），俗名张保康，江苏南通人，佛学“大师”，教育家，佛教“弘法大师”，日本立正大学博士，也是禅宗曹洞宗的第五十代传人、临济宗的第五十七代传人、台湾法鼓山的创办人，法鼓山的弟子信众尊称为“师父”。\n\n禪的世界 - 聖嚴法師.pdf (访问密码: 5098)\n","categories":["佛学"]},{"title":"MarkDown学习","url":"/2025/05/12/knows/MarkDown%E5%AD%A6%E4%B9%A0/","content":"标题学习# 一级标题## 二级标题### 三级标题\n\n列表学习- 无序列表- 无序列表- 无序列表\n\n1. 有序列表2. 有序列表3. 有序列表\n\n引用学习&gt; 引用学习\n\n分割线学习---\n\n图片学习![图片名称](图片路径)\n\n超链接学习[超链接名称](超链接路径)\n\n或者 跳转到新的窗口\n[超链接名称](超链接路径 &quot;新窗口&quot;)&#123;target=&quot;_blank&quot;&#125;\n\n### 代码学习\n\n```代码语言代码内容\n\n","categories":["知识库"]},{"title":"字里藏医","url":"/2025/05/13/books/zhongyi/%E5%AD%97%E9%87%8C%E8%97%8F%E5%8C%BB/","content":"\n《字里藏医》是2007年安徽教育出版社出版的图书，作者是徐文兵。该书深入浅出地介绍了中医词汇的古今之别，以帮助读者了解中医的基本知识。\n\n内容简介几千年来，我们使用的都是同样的文字，但表达的意思可能已经不同了。很多字词已经渐渐失去了它们的原意。在多数情况下，这并不会造成什么困扰，但对中医这门古老学问就不同了，它需要我们唤醒那些沉睡的文字的原意。在现代语境下，在涉外教学看病过程中，徐文兵大夫随时会遭遇熟悉字词的陌生化情形。比如说“思想”，思和想有什么区别？又比如“魂魄”，魂是什么，魄是什么？“肥”与“胖”的区别？“皮”与“肤”是一回事吗？    要研究中医，发皇古意，就必须先从最基本的词汇入手，正义严辞。《字里藏医》就是这样一本以深入浅出的文字厘清中医最基本的词汇，恢复中医本来面目的启蒙书。\n下载地址字里藏医.txt (访问密码: 5098)\n","categories":["中医"],"tags":["徐文兵"]},{"title":"Dart基础","url":"/2025/05/13/knows/flutter/dart%E5%9F%BA%E7%A1%80/","content":"变量学习1、var 关键字类似于 JavaScript 中的 var，它可以接收任何类型的变量，但最大的不同是 Dart 中 var 变量一旦赋值，类型便会确定，则不能再改变其类型，如：\n// 定义变量var name = &quot;张三&quot;;name = 123; // 报错;\n","categories":["知识库"],"tags":["Flutter","Dart"]},{"title":"Flutter基础组件","url":"/2025/05/12/knows/flutter/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/","content":"文本组件\nText：用于显示文本。\nRichText：用于显示富文本，支持多种样式。\nDefaultTextStyle：用于设置默认文本样式。\nSelectableText：用于显示可选择的文本。\nFittedBox：用于调整文本大小以适应可用空间。\nTextSpan：用于构建富文本的文本片段。\nTextStyle：用于定义文本的样式，如字体、大小、颜色等。\nTextDecoration：用于定义文本的装饰，如下划线、删除线等。\nTextAlign：用于定义文本的对齐方式，如左对齐、右对齐、居中对齐等。\nTextOverflow：用于定义文本溢出时的处理方式，如截断、省略号等。\nTextDirection：用于定义文本的方向，如左到右、右到左等。\nTextScaleFactor：用于定义文本的缩放因子。\nTextWidthBasis：用于定义文本的宽度基准。\nTextHeightBehavior：用于定义文本的高度行为。\nTextBaseline：用于定义文本的基线。\nTextDecorationStyle：用于定义文本装饰的样式，如实线、虚线等。\nTextDecorationColor：用于定义文本装饰的颜色。\n\n布局组件\nContainer：用于创建一个矩形的容器，用于包裹其他组件。\nPadding：用于在容器内添加内边距，用于调整组件的位置。\nMargin：用于在容器外添加外边距，用于调整组件的位置。\n\n交互组件\nGestureDetector：用于检测用户的手势，如点击、长按、滑动等。\nInkWell：用于创建一个可点击的 ink 效果，用于响应用户的手势。\nDraggable：用于创建可拖动的组件。\nDropTarget：用于创建可接收拖动组件的目标。\nDragTarget：用于创建可接收拖动组件的目标。\nDragSource：用于创建可拖动的组件。\nDragSourceListener：用于监听拖动组件的状态。\nDropTargetListener：用于监听接收拖动组件的状态。\nDragTargetAcceptor：用于接受拖动组件的目标。\nDragTargetAcceptorListener：用于监听接收拖动组件的状态。\nDragTargetAcceptorDelegate：用于定义接收拖动组件的目标的行为。\nDragTargetAcceptorDelegateListener：用于监听接收拖动组件的状态。\nDragTargetAcceptorDelegateBuilder：用于构建接收拖动组件的目标的行为。\n\n动画组件\nAnimatedContainer：用于创建一个可动画的容器，用于调整组件的位置、大小、颜色等。\nAnimatedOpacity：用于创建一个可动画的透明度，用于调整组件的透明度。\nAnimatedPositioned：用于创建一个可动画的位置，用于调整组件的位置。\nAnimatedPadding：用于创建一个可动画的内边距，用于调整组件的位置。\nAnimatedMargin：用于创建一个可动画的外边距，用于调整组件的位置。\nAnimatedSize：用于创建一个可动画的大小，用于调整组件的大小。\nAnimatedAlign：用于创建一个可动画的对齐方式，用于调整组件的位置。\n\n弹窗组件\nAlertDialog：用于创建一个对话框，用于显示提示信息。\nSimpleDialog：用于创建一个简单的对话框，用于显示提示信息。\nBottomSheet：用于创建一个底部弹出的对话框，用于显示提示信息。\nDialog：用于创建一个对话框，用于显示提示信息。\nSnackBar：用于创建一个弹出的提示信息，用于显示提示信息。\nBottomAppBar：用于创建一个底部弹出的对话框，用于显示提示信息。\nBottomNavigationBar：用于创建一个底部导航栏，用于显示提示信息。\nBottomNavigationBarItem：用于创建一个底部导航栏的条目，用于显示提示信息。\n\n","categories":["知识库"],"tags":["Flutter"]},{"title":"视频播放测试地址","url":"/2025/05/20/knows/flutter/%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E6%B5%8B%E8%AF%95%E5%9C%B0%E5%9D%80/","content":"最近在开发视频播放相关的业务功能，开发测试时，需要涉及到 MP4、M3U8 等视频格式。我每次找测试视频地址时，都要找很久，现在把我在网上收集到的 MP4、M3U8 格式视频地址放在这里，希望帮助到正在进行视频播放开发的你。\nMP4 格式海洋：http://vjs.zencdn.net/v/oceans.mp4\n西瓜视频 Demo：https://sf1-cdn-tos.huoshanstatic.com/obj/media-fe/xgplayer_doc_video/mp4/xgplayer-demo-360p.mp4\n大兔子：http://www.w3school.com.cn/example/html5/mov_bbb.mp4\n大灰熊：https://www.w3schools.com/html/movie.mp4\n冰川：https://media.w3.org/2010/05/sintel/trailer.mp4\n新闻视频 1：https://stream7.iqilu.com/10339/upload_transcode/202002/09/20200209105011F0zPoYzHry.mp4\n新闻视频 2：https://stream7.iqilu.com/10339/upload_transcode/202002/09/20200209104902N3v5Vpxuvb.mp4\nM3U8 格式西瓜播放器 Demo：https://sf1-cdn-tos.huoshanstatic.com/obj/media-fe/xgplayer_doc_video/hls/xgplayer-demo.m3u8\n大白兔：https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8\n","categories":["知识库"],"tags":["Flutter","视频"]},{"title":"Flutter配置相关","url":"/2025/05/20/knows/flutter/%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/","content":"配置 Java 环境1、安装 Java\nbrew install openjdk@21\n\n2、配置环境变量写进.bash_profile\nexport JAVA_HOME=/opt/homebrew/opt/openjdk@21export PATH=$JAVA_HOME/bin:$PATH\n\n3、验证\njava -version\n\n注意：gradle 版本与 java 版本要匹配https://docs.gradle.org/current/userguide/compatibility.html#java\n换源build.gradle.kts\nallprojects &#123;    repositories &#123;        maven &#123; setUrl(&quot;https://maven.aliyun.com/repository/public&quot;) &#125;        maven &#123; setUrl(&quot;https://maven.aliyun.com/repository/google&quot;) &#125;        maven &#123; setUrl(&quot;https://maven.aliyun.com/repository/gradle-plugin&quot;) &#125;    &#125;&#125;\n\nsettings.gradle.kts\nrepositories &#123;    maven &#123; setUrl(&quot;https://maven.aliyun.com/repository/public&quot;) &#125;    maven &#123; setUrl(&quot;https://maven.aliyun.com/repository/google&quot;) &#125;    maven &#123; setUrl(&quot;https://maven.aliyun.com/repository/gradle-plugin&quot;) &#125;&#125;\n\nbuild.gradle.kts 文件中的仓库配置是用于项目所有模块的全局配置，而 settings.gradle.kts 中的配置是用于插件管理的。在 Gradle 项目中，通常需要在这两个地方都配置仓库地址，以确保所有依赖项都能正确下载。建议将 build.gradle.kts 中的仓库配置也替换为阿里云镜像源，以保持一致性并提高构建速度。\n","categories":["知识库"],"tags":["Flutter","Java"]},{"title":"git问题解决","url":"/2025/05/16/knows/git/git%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","content":"git 问题解决\ngit push –set-upstream origin master\nPlease contact your system administrator.\nAdd correct host key in &#x2F;Users&#x2F;xxx&#x2F;.ssh&#x2F;known_hosts to get rid of this message.\nOffending RSA key in &#x2F;Users&#x2F;xxx&#x2F;.ssh&#x2F;known_hosts:3\nHost key for github.com has changed and you have requested strict checking.\nHost key verification failed.\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n\n应该怎么处理\n这个问题是在执行 git push 命令时，因远程主机密钥更改导致的主机密钥验证失败。以下是几种处理方法：\n1、手动删除错误密钥可以使用以下命令删除 known_hosts 文件中错误的密钥：\n2、使用 ssh-keygen 重新生成密钥 或 将 SSH 密钥添加到 GitHub 账户生成新密钥ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;\n\n将 SSH 密钥添加到 GitHub 账户cat ~/.ssh/id_ed25519.pub\n\n3、测试连接ssh -T git@github.com\n","categories":["知识库"],"tags":["git"]},{"title":"误添加的文件，怎么删除","url":"/2025/05/16/knows/git/%E8%AF%AF%E6%B7%BB%E5%8A%A0%E7%9A%84%E6%96%87%E4%BB%B6/","content":"误添加的文件，怎么删除将 .env 配置文件添加到了 git 仓库上，因为里面有重要的配置信息，所以需要删除。\n\n先将.env 文件从 git 仓库中删除\n\ngit rm --cached .env\n\n\n推送一次\n\ngit commit -m &quot;Remove .env file from repository&quot;git push origin main\n","categories":["知识库"],"tags":["git"]},{"title":"pyenv 使用","url":"/2025/05/14/knows/python/pyenv%E4%BD%BF%E7%94%A8/","content":"pyenv 使用要使用 pyenv 创建一个名为 ai 的新虚拟环境，您可以按照以下步骤操作：\n\n确保已安装 pyenv 和 pyenv-virtualenv首先，确保您已经在系统中安装了 pyenv 和 pyenv-virtualenv。如果还没有安装，可以参考以下步骤进行安装：安装 pyenv\n\n使用 Homebrew 安装（适用于 macOS）brew install pyenv\n\n或者使用官方安装脚本curl https://pyenv.run | bash\n\n安装完成后，根据提示将以下内容添加到您的 shell 配置文件（如 .bashrc, .zshrc）中：\nexport PATH=&quot;$HOME/.pyenv/bin:$PATH&quot;eval &quot;$(pyenv init --path)&quot;eval &quot;$(pyenv virtualenv-init -)&quot;\n\n然后，重新加载配置文件：source ~/.bashrc  # 或者 source ~/.zshrc\n\n安装 pyenv-virtualenv如果您使用的是 pyenv 官方安装脚本，pyenv-virtualenv 通常已经包含在内。如果没有，可以通过以下方式安装：\n使用 Homebrew 安装（适用于 macOS）brew install pyenv-virtualenv\n\n或者通过 PyPI 安装\n# 或者通过 PyPI 安装pip install pyenv-virtualenv\n\n\n安装所需的 Python 版本在创建虚拟环境之前，确保您已经安装了所需的 Python 版本。例如，安装 Python 3.10.0：\n\npyenv install 3.10.0\n\n您可以通过以下命令查看可用的 Python 版本：\npyenv install --list`\n\n\n创建虚拟环境使用以下命令创建一个名为 ai 的虚拟环境，并指定 Python 版本（例如 3.10.0）：\n\npyenv virtualenv 3.10.0 ai\n\n如果您希望虚拟环境使用系统默认的 Python 版本，可以省略版本号：\npyenv virtualenv ai\n\n\n激活虚拟环境激活刚刚创建的 ai 虚拟环境：\n\npyenv activate ai\n\n激活后，您的命令提示符通常会显示当前激活的虚拟环境名称 (ai)。 5. 验证虚拟环境您可以通过以下命令验证当前 Python 版本和虚拟环境：\npython --version\n\n输出应类似于：Python 3.10.0\n\n安装项目依赖在虚拟环境中，您可以像平常一样使用 pip 安装所需的包。例如：\n\npip install numpy pandas matplotlib\n\n\n退出虚拟环境当您完成工作并希望退出虚拟环境时，可以使用以下命令：\n\npyenv deactivate\n\n\n列出所有虚拟环境要查看系统中所有已创建的虚拟环境，可以使用：\n\npyenv virtualenvs\n\n\n删除虚拟环境如果您不再需要某个虚拟环境，可以使用以下命令删除它：\n\npyenv uninstall ai\n\n常见问题排查pyenv: command not found确保已将 pyenv 的路径添加到您的 shell 配置文件中，并重新加载配置。virtualenv: command not found确保已安装 pyenv-virtualenv 并正确初始化。虚拟环境未激活确认使用 pyenv activate ai 激活虚拟环境，并检查命令提示符是否显示 (ai)。\n通过以上步骤，您应该能够成功使用 pyenv 创建和管理名为 ai 的虚拟环境。如果您遇到任何问题，请随时提问！\n","categories":["知识库","python"],"tags":["pyenv"]},{"title":"supervisor配置问题总结","url":"/2025/05/13/knows/python/supervisor%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/","content":"问题 1：supervisor 启动 gunicorn 报错：显示\n\ngunicorn FATAL Exited too quickly (process log may have details)但查找进程显示有 gunicorn 进程\n\nps -ef | grep gunicorn\n\n通过 AI 分析：\n\ndaemon &#x3D; True 与 Supervisor 冲突Gunicorn 的 daemon &#x3D; True：会让 Gunicorn 以后台守护进程方式运行（脱离终端），而 Supervisor 本身会管理进程的前台运行。两者同时启用时，Supervisor &gt; 会认为 Gunicorn 已退出（因为 Gunicorn 主进程已退出），导致标记为 FATAL。解决方案：移除 gunicorn 配置文件里的 daemon &#x3D; True，让 Gunicorn 以前台进程方式运行，由 Supervisor 管理。\n\n问题 2：supervisor 启动的项目，还需要指定 pidfile 吗？：显式指定 pidfile,但查看目录并不会生成 pid 文件查 AI：\n\n当你使用 Supervisor 管理应用时，通常不需要再为应用单独配置 pidfile。Supervisor 本身会自动管理所有被监控进程的 PID 文件（进程标识符文件），用于跟踪进程状态（如启动、停止、重启）。以下是详细说明：为什么不需要应用自定义 pidfile？\n\nSupervisor 自动管理 PID 文件Supervisor 会为每个被管理的程序生成一个 .pid 文件，默认路径为：\n\n\n\n/var/run/supervisor/supervisord.pid/tmp/supervisor-&lt;program&gt;.pid\n\n或根据你的配置指定路径。作用：Supervisor 使用 .pid 文件来记录进程的 PID，确保进程状态可追踪。\n\n\n\n应用自定义 pidfile 的潜在问题冲突风险：如果应用（如 Gunicorn）也配置了 pidfile，可能导致：Supervisor 和应用同时写入同一文件，引发冲突。应用退出后，Supervisor 的 .pid 文件可能残留，导致下次启动失败。冗余操作：Supervisor 已经管理了进程生命周期，应用的 pidfile 通常是多余的。\n\n\n参考：CentOS+Django+uWSGI+Celery+Supervisor 配置\n","categories":["知识库","python"],"tags":["supervisor","gunicorn"]}]